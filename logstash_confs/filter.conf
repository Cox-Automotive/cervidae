filter {
	# Use the following directives for the apache instance running for my application 'myapp'
	if [type] == "apache" and [app] == "$$APP$$" {
		# Make sure the message "looks" like what we expect it to be. Since all log messages are 
		# mostly normalized, you create the pattern once and only change it if the message format
		# gets update (which is pretty rare).
		grok {
			patterns_dir => "$$ROOT$$/etc/logstash/patterns"
			match => [ "message", "%{APACHELOG}" ]
		}

		# If it doesn't understand our message, drop it.
		if "_grokparsefailure" in [tags] {
			drop { }
		}

		# Don't log apache server status requests (mod_status)
		if [request] =~ /.*server-status.*/ {
			drop { }
		}

		# You can do some pretty complex checking here. For instance, suppose you frequently get hit by
		# bots and scrapers requesting weird stuff like config.inc.php but you only serve xhtml and html
		# documents. The following will not log any requests that is not / or /<whatever>.xhtml or 
		# /<whatever>.html
		if [request] !~ /^.*\.(x)?html(\?.*)?/ or [request] !~ /^\// {
			drop { }
		}

		# Pull from the Geolite database, and store into a [geoip][location] format that elasticsearch
		# easily understands.
		geoip {
			source => "clientip"
		}

		# The fingerprint is the unique identifier for this log message. It's like a primary key for
		# the message.
		fingerprint {
			target => "fingerprint"
			key => "logstash"
			method => "SHA1"
			concatenate_sources => true
		}

		# You can also execute arbitrary Ruby code. This is useful for transforming fields, adding additional
		# data, or performing other operations (like writing to a message queue). In this example, we are
		# adding an 'add_time' field to see when the message actually makes it to logstash. This is useful 
		# for measuring the lag time from the shipper to logstash.
		ruby {
			code => "event['add_time'] = Time.now.utc"
		}

		# mutate allows you to transform data without writing raw Ruby. It does this by providing helpers
		# like `strip` (strip whiteswpace) and `gsub` (regex).
		mutate {
			strip => [ "request"]
		}

		# The expected date formats for the log messages.
    	date {
			match => [ "timestamp", "dd/MMM/yyy:HH:mm:ss Z", "yyyy-MM-dd HH:mm:ss,SSS", "MMM dd, yyyy HH:mm:ss a" ]
        }
    }
}
